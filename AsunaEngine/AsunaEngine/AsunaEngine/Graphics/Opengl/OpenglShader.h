#pragma once
#include <iostream>
#include "../Shader.h"
namespace asuna
{
	////////////////////////////////////////////////////////////////////
	/////////////////////////// Basic //////////////////////////////////
	////////////////////////////////////////////////////////////////////
	class OpenglShader : public Shader
	{
	protected:
		OpenglShader(ShaderType shaderType) : Shader(shaderType)
		{
		}

	public:
		unsigned int m_Shader = 0;

	};

	////////////////////////////////////////////////////////////////////
	/////////////////////////// Vertex Shader //////////////////////////
	////////////////////////////////////////////////////////////////////

	class OpenglVertexShader : public OpenglShader
	{
	protected:
		OpenglVertexShader() : OpenglShader(ShaderType::VertexShader)
		{}

	public:
		static OpenglVertexShader* Create(const std::string& path);
	};

	////////////////////////////////////////////////////////////////////
	/////////////////////////// Pixel Shader ///////////////////////////
	////////////////////////////////////////////////////////////////////
	class OpenglPixelShader : public OpenglShader
	{
	protected:
		OpenglPixelShader() : OpenglShader(ShaderType::PixelShader)
		{}

	public:
		static OpenglPixelShader* Create(const std::string& path);
	};


	////////////////////////////////////////////////////////////////////
	/////////////////////////// Shader Program /////////////////////////
	////////////////////////////////////////////////////////////////////
	class OpenglShaderProgram
	{
	protected:
		OpenglShaderProgram(){}
	public:
		unsigned int m_Program = 0;
	public:
		static OpenglShaderProgram* Create(OpenglVertexShader* vs, OpenglPixelShader* ps);
	};

}

